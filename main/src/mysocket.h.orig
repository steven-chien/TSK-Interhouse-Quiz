#ifndef MYSOCKET_H
#define MYSOCKET_H

#define TRUE             1
#define FALSE            0

/** Callback function prototype for receiving msg. */
typedef void (*conn_callback)(int port, char* msg);

/** Callback function prototype for poll() timeout. */
typedef void (*timeout_callback)();

/**
 * @brief Loop waiting any connection, msg or timeout then callback.
 * @param port listening to which port
 * @param conn_cb callback after receiving a msg
 * @param timeout_cb callback after timeout
 * @param timeout timeout the listen in millisecond
 */
void poll_loop( int port , conn_callback conn_cb, timeout_callback timeout_cb, int timeout);


/**
 * @brief Send message to connecting sockets according to the distination port.
 * @param port the destination port
 * @param msg msg needed to send out
 * @retval number of connections sended by this function
 */
int send_to_port(int port, char* msg);

/**
 * @brief Start a socket to target IP:Port
 * @param ip target ip address (eg."127.0.0.1")
 * @param port target port address
 * @retval 0 success
 * @retval <0 connection fail
 */
int create_connection(char *ip, int port);
{
	int sd, rc;
	struct sockaddr_in addr;
	sd = socket(AF_INET, SOCK_STREAM, 0);
	if ( sd < 0 )
    {
        perror( "Failed to create socket." );
        return -1;
    }
    /* Allow socket descriptor to be reuseable                   */
    rc = setsockopt( sd, SOL_SOCKET,  SO_REUSEADDR,
                     ( char * )&on, sizeof( on ) );
    if ( rc < 0 )
    {
        perror( "setsockopt() failed" );
        close( sd );
        return -1;
    }
    /* Set socket to be nonblocking. All of the sockets for    */
    /* the incoming connections will also be nonblocking since  */
    /* they will inherit that state from the listening socket.   */
    rc = ioctl( sd, FIONBIO, ( char * )&on );
    if ( rc < 0 )
    {
        perror( "ioctl() failed" );
        close( sd );
        return -1;
    }
	memset( &addr, '0', sizeof(addr));
	addr.sin_family = AF_INET;
	addr.sin_port = htons(port);
	inet_pton(AF_INET, IP, &addr.sin_addr);
	rc = connect(sd, (struct sockaddr*)&addr, sizeof(addr));
    if ( rc < 0 )
    {
        perror( "connect() failed" );
        close( sd );
        return -1;
    }
	printf("Connected to - %s:%di\n", ip, port);
                    fds[nfds].fd = new_sd;
                    fds[nfds].events = POLLIN;
                    nfds++;
	return 0;
}

#endif
